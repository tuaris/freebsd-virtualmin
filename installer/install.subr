#!/bin/sh

install_core_services() {
	# Install base services
	pkg install -y $PKG_VIRTUALMIN $PKG_USERMIN $PKG_BIND $PKG_APACHE

	# Install PHP
	pkg install -y $PKG_PHP $PKG_MODPHP $PKG_MODFCGID

	# Install Mail services
	export POSTFIX_DEFAULT_MTA=yes
	export BATCH=yes
	pkg install -y $PKG_POSTFIX $PKG_DOVECOT $PKG_PROCMAIL $PKG_SPAMASSASSIN $PKG_CLAMAV

	# Install FTP Server
	pkg install -y $PKG_FTPD

	# Install MySQL Database Server
	pkg install -y $PKG_MYSQL $PKG_MYSQL_PERL

	# Install PostgreSQL Server
	pkg install -y $PKG_POSTGRE $PKG_POSTGRE_PERL

	# Install OpenLDAP Server
	[ $SKIP_LDAP_SERVER_INSTALL -eq 0 ] && pkg install -y $PKG_OPENLDAP $PKG_LDAP_PERL
}

install_core_utilities() {
	# Install Supporting Packages
	pkg install -y $PKG_WEBALIZER $PKG_LOGROTATE $PKG_SQLITE_PERL

	# These packages are required for LDAP authentication
	pkg install -y $PKG_PAM_LDAP $PKG_NSS_LDAP

	# Logrotate expects this file to exist otherwise it won't run
	touch /var/log/lastlog
}

setup_dovecot () {
	# Dovecot won't start with our default config without an SSL cert
	cp $TMPDIR/cert.pem $LOCAL_BASE/etc/ssl/certs/dovecot.pem
	cp $TMPDIR/key.pem $LOCAL_BASE/etc/ssl/private/dovecot.pem

	# Copy Default Configuration
	cp $CONFIG_BASE/dovecot/example-config/dovecot.conf $CONFIG_BASE/dovecot/
	cp -R $CONFIG_BASE/dovecot/example-config/conf.d $CONFIG_BASE/dovecot/

	# Uncomment the protocols line
	# DISABLED - Since Dovecot 2.3 the submission service is enabled by default
	#sed -i '' -r 's/^#?[[:space:]]*(protocols[[:space:]]*=.*)$/\1/' $LOCAL_BASE/etc/dovecot/dovecot.conf
	
	# Enable only imap pop3 lmtp
	sed -i '' -r 's/^#?[[:space:]]*(protocols[[:space:]]*=.*)$/protocols = imap pop3 lmtp/' $LOCAL_BASE/etc/dovecot/dovecot.conf

	# Setup webmin configiration
	setconfig "ssl_cert= <$LOCAL_BASE/etc/ssl/certs/dovecot.pem" "$LOCAL_BASE/etc/dovecot/conf.d/10-ssl.conf"
	setconfig "ssl_key= <$LOCAL_BASE/etc/ssl/private/dovecot.pem" "$LOCAL_BASE/etc/dovecot/conf.d/10-ssl.conf"

	# Setup SASL for Postfix
	cp $LOCAL_BASE/etc/dovecot/conf.d/10-master.conf $TMPDIR/awk-temp.txt
	cat $TMPDIR/awk-temp.txt | awk '/# Postfix smtp-auth/ {n=NR} n && NR-n && NR-n<=3 {sub("# ?","")} {print}' > $LOCAL_BASE/etc/dovecot/conf.d/10-master.conf
	#user = postfix
	#group = postfix
	rm -f $TMPDIR/awk-temp.txt
}

# Ensures a fully qualified hostname is properly setup for this system
setup_hostname () {
	logger_info "Checking for fully qualified hostname..."
	name=$(hostname -f)
	if ! is_fully_qualified $name; then set_hostname
		elif [ "$forcehostname" != "" ]; then set_hostname
	fi
	add_hostname_to_hosts
}

setup_openldap () {
	# Configure the LDAP client
	ldap_configure_client

	# Skip server setup if using a remote or existing server
	[ $SKIP_LDAP_SERVER_INSTALL -eq 1 ] && return 0

	# Configure the local LDAP server
	ldap_confifure_server

	# Offline load of initial schema
	ldap_load_schema
}

ldap_confifure_server () {
	# Set correct location for API service socket to /var/run/openldap/ldapi
	sysrc slapd_flags='-h "ldapi://%2fvar%2frun%2fopenldap%2fldapi/ ldap://0.0.0.0/"' slapd_sockets="/var/run/openldap/ldapi"

	# Config file to edit
	conf_file=/usr/local/etc/openldap/slapd.conf

	# Enable MDB backend
	sed -i '' 's,^#[[:space:]]*\(moduleload[[:space:]]*back_mdb.*$\),\1,g' $conf_file

	# Set the Root DN (suffix) to the search domain of this system
	suffix=$LDAP_BASE_DN
	sed -i '' 's#^\(suffix[[:space:]]*\).*$#\1"'$suffix'"#g' $conf_file

	# Set the administrator username
	rootdn="cn=Manager,"${suffix}
	sed -i '' 's#^\(rootdn[[:space:]]*\).*$#\1"'$rootdn'"#g' $conf_file

	# Set the password
	rootpw=$(dd if=/dev/random bs=8 count=1 2>/dev/null| openssl base64)
	sed -i '' 's,^\(rootpw[[:space:]]*\).*$,\1'$rootpw',g' $conf_file

	# Add the 'cosine' scheme (required for nis schema)
	if [ $(head -50 "${conf_file}" | grep -q "schema/cosine.schema"; echo $?) == 1 ]; \
	then echo -e '/^include.*core\.schema$/\na\ninclude /usr/local/etc/openldap/schema/cosine.schema\n.\nw\n' | \
	ed -s $conf_file >/dev/null; \
	fi

	# Add the 'nis' scheme (required for virtualmin)
	if [ $(head -50 "${conf_file}" | grep -q "schema/nis.schema"; echo $?) == 1 ]; \
	then echo -e '/^include.*cosine\.schema$/\na\ninclude /usr/local/etc/openldap/schema/nis.schema\n.\nw\n' | \
	ed -s $conf_file >/dev/null; \
	fi
}

ldap_configure_client () {
	# Config file to edit
	conf_file=/usr/local/etc/openldap/ldap.conf

	sed -i '' 's|^#\(URI[[:space:]]*\).*$|\1'$LDAP_URI'|gi' $conf_file
	sed -i '' 's|^#\(BASE[[:space:]]*\).*$|\1'$LDAP_BASE_DN'|gi' $conf_file
}

ldap_load_schema () {
	# Create Users organizational unit
cat <<EOF | slapadd
dn: ou=Users,${LDAP_BASE_DN}
objectClass: top
objectClass: organizationalUnit
ou: Users
EOF

	# Create Groups organizational unit
cat <<EOF | slapadd
dn: ou=Groups,${LDAP_BASE_DN}
objectClass: top
objectClass: organizationalUnit
ou: Groups
EOF
}

setup_postfix () {
	# Create /etc/aliases
	newaliases

	#configure for virtual hosting
	postconf -e virtual_alias_maps=hash:$CONFIG_BASE/postfix/virtual
	touch $CONFIG_BASE/postfix/virtual
	postmap hash:$CONFIG_BASE/postfix/virtual

	# Use Maildir's
	postconf home_mailbox=Maildir/
	postconf mailbox_command="$(which procmail) -a \"\$EXTENSION\""

	# Setup SASL
	postconf -e smtpd_sasl_type=dovecot
	postconf -e smtpd_sasl_path=private/auth
	postconf -e smtpd_sasl_auth_enable=yes

	postconf -e mua_client_restrictions=permit_sasl_authenticated,reject
	postconf -e mua_sender_restrictions=reject_sender_login_mismatch
	postconf -e mua_helo_restrictions=

	# Setup TLS with default Certificates and Keys
	postconf -e smtpd_tls_cert_file=$CONFIG_BASE/ssl/certs/postfix.pem
	postconf -e smtpd_tls_key_file=$CONFIG_BASE/ssl/private/postfix.pem
	cp $TMPDIR/cert.pem $CONFIG_BASE/ssl/certs/postfix.pem
	cp $TMPDIR/key.pem $CONFIG_BASE/ssl/private/postfix.pem

	#awk '/#submission/ {n=NR} NR-n<=1 || /-o/ {sub("#?","")} {print}' $CONFIG_BASE/postfix/master.cf
	#awk '/#submission/ {n=NR} /#smtps/ {b=1} NR-n<=1 || /-o/ && b!=1 {sub("#?","")} {print}' $CONFIG_BASE/postfix/master.cf
	#awk '/#submission/ {n=NR} /#smtps/ {b=1} NR-n<=1 && b==0 {sub("#?","")} {print b}' $CONFIG_BASE/postfix/master.cf
	cp $CONFIG_BASE/postfix/master.cf $TMPDIR/awk-temp.txt
	cat $TMPDIR/awk-temp.txt | awk '/#submission/ {n=NR;b=NR} /-o/ {b++} NR-n<=1 || b==NR {sub("#?","")} {print}' > $CONFIG_BASE/postfix/master.cf
	postconf -Pe submission/inet/smtpd_tls_loglevel=1
	postconf -Pe submission/inet/smtpd_sasl_type=dovecot
	postconf -Pe submission/inet/smtpd_sasl_path=private/auth
	postconf -Pe submission/inet/smtpd_sasl_security_options=noanonymous
	postconf -Pe submission/inet/smtpd_sasl_local_domain=\$myhostname
	postconf -Pe submission/inet/smtpd_sender_login_maps=hash:$CONFIG_BASE/postfix/virtual
	postconf -Pe submission/inet/smtpd_recipient_restrictions=reject_non_fqdn_recipient,reject_unknown_recipient_domain,permit_sasl_authenticated,reject
}

setup_webmin () {
	logger_info "Setting Up Webmin..."

	# Setup Webmin non-interactivly by presetting some variables
	config_dir=$WEBMIN_CONFIG_DIR
	var_dir=/var/log/webmin
	port=10000
	login=admin
	crypt=x
	ssl=1
	theme=authentic-theme
	perl=$(which perl)

	export config_dir var_dir port login crypt ssl perl theme

	# Webmin wants a compltly empty directory
	# The Virtualmin package creats an empty directory 
	# in the Webmin configuration directory
	rmdir $config_dir/virtual-server

	logger_info "Installing Webmin..."
	runner "$LIB_BASE/webmin/setup.sh $LIB_BASE/webmin"

	# Manually set the theme
	setconfig "theme=$theme" $WEBMIN_CONFIG_DIR/config
	setconfig "preroot=$theme" $WEBMIN_CONFIG_DIR/miniserv.conf
}

setup_usermin () {
	logger_info "Setting Up Usermin..."	

	# Setup Usermin non-interactivly by presetting some variables
	config_dir=$CONFIG_BASE/usermin
	var_dir=/var/log/usermin
	port=20000
	login=admin
	crypt=x
	ssl=1
	theme=authentic-theme
	perl=$(which perl)

	export config_dir var_dir port login crypt ssl perl theme

	logger_info "Installing Usermin..."
	runner "$LIB_BASE/usermin/setup.sh $LIB_BASE/usermin"

	# Manually set the theme
	setconfig "theme=$theme" $CONFIG_BASE/usermin/config
	setconfig "preroot=$theme" $CONFIG_BASE/usermin/miniserv.conf

	# Re-Run Post-Install script for Usermin Webmin Module
	(cd $LIB_BASE/webmin; WEBMIN_CONFIG=$WEBMIN_CONFIG_DIR WEBMIN_VAR=/var/log/webmin $LIB_BASE/webmin/run-postinstalls.pl usermin)

	# Manually update cache file
	setconfig "usermin=1" $WEBMIN_CONFIG_DIR/installed.cache

}

install_virtualmin_modules () {
	# Install Virtulmin-specific modules and themes, as defined in updates.txt
	logger_info "Installing Virtualmin modules and themes..."
	repopath=gpl/

	# Download module list
	download http://${LOGIN}software.virtualmin.com/${repopath}wbm/updates.txt

	# Filter out the virtual-server module since it's already installed
	grep -v 'virtual-server[[:space:]]' $TMPDIR/updates.txt > $TMPDIR/modules.txt

	# Download and Install each module
	for modpath in `cut -f 3 $TMPDIR/modules.txt`; do

		# Download the module
		modfile=`basename $modpath`
		logger_info "Downloading $modfile"
		download http://${LOGIN}software.virtualmin.com/$modpath

		# Check if sucessful
		if [ "$?" != "0" ]; then
			#logger_info "Download of Webmin module from $modpath failed"
			echo "Download of Webmin module from $modpath failed"
		fi

		# Install the module into webmin
		logger_info "Installing $modfile"
		$LIB_BASE/webmin/install-module.pl $TMPDIR/$modfile $CONFIG_BASE/webmin >> $LOG

		# Check if sucessful
		if [ "$?" != "0" ]; then
			#logger_info "Installation of Webmin module from $modpath failed"
			echo "Installation of Webmin module from $modpath failed"
		fi

		# Install the theme module to usermin as well
		if [ -r $TMPDIR/virtual-server-theme-*.wbt.gz ]; then
			$LIB_BASE/usermin/install-module.pl $TMPDIR/$modfile $CONFIG_BASE/webmin >> $LOG
		fi

		# Clean up
		rm -f $TMPDIR/$modfile
	done
}

NOTUSEED_install_virtualmin () {
	# Configure Webmin to use updates.txt
	logger_info "Configuring Webmin to use Virtualmin updates service..."
	echo "upsource=http://software.virtualmin.com/${repopath}wbm/updates.txt	http://www.webmin.com/updates/updates.txt" >>$webmin_config_dir/webmin/config
	if [ -n "$LOGIN" ]; then
		echo "upuser=$SERIAL" >>$webmin_config_dir/webmin/config
		echo "uppass=$KEY" >>$webmin_config_dir/webmin/config
	fi
	echo "upthird=1" >>$webmin_config_dir/webmin/config
	echo "upshow=1" >>$webmin_config_dir/webmin/config

	# Add environment settings so that API scripts work
	if grep -qv WEBMIN_CONFIG /etc/profile; then 
		echo "export WEBMIN_CONFIG=/usr/local/etc/webmin" >>/etc/profile
	fi
	if grep -qv WEBMIN_CONFIG /etc/csh.cshrc; then
		echo "setenv WEBMIN_CONFIG '/usr/local/etc/webmin'" >>/etc/csh.cshrc
	fi

	# It's possible to get here without address being defined
	. /etc/rc.conf
	primaryiface=${primaryiface:=`echo $network_interfaces | cut -d" " -f1`}
	address=${address:=`/sbin/ifconfig $primaryiface | grep "inet " | cut -d" " -f2`}

	return 0
}

NOTUSEED_post_install_tasks(){

	# SpamAssassin needs a config file
	testcp /usr/local/etc/mail/spamassassin/local.cf.sample /usr/local/etc/mail/spamassassin/local.cf

	# Clam needs fresh database
	logger_info "Initializing the clamav database.  This may take a long time..."
	freshclam

	# awstats
	testmkdir /usr/local/etc/awstats
	testcp /usr/local/www/awstats/cgi-bin/awstats.model.conf /usr/local/etc/awstats/awstats.model.conf

	# www user needs a shell to run mailman commands
	chpass -s /bin/sh www	

	# procmail-wrapper download and install
	logger_info "Installing procmail-wrapper."	
	if $download http://ftp.morante.net/pub/FreeBSD/extra/virtualmin/$os_version/$arch/procmail-wrapper
	then
		logger_info "Pre-Compiled procmail-wrapper sucesfully downloaded"
	else
		# No Pre-Compiled version avaialbe, try and download source and compile
		logger_info "No Pre-Build procmail-wrapper available for this FreeBSD platform"
		logger_info "Building procmail-wrapper"
		mkdir procmail-wrapper-build
		cd procmail-wrapper-build
		$download http://ftp.morante.net/pub/FreeBSD/extra/virtualmin/noarch/procmail-wrapper.c
		cc procmail-wrapper.c -o procmail-wrapper
		mv procmail-wrapper ../
		cd ..
		rm -Rf procmail-wrapper-build
	fi
	mv procmail-wrapper /usr/local/bin/
	chmod 6755 /usr/local/bin/procmail-wrapper
	if [ ! -f /usr/bin/procmail-wrapper ]; then
		ln -sf /usr/local/bin/procmail-wrapper /usr/bin/procmail-wrapper
	fi

	return 0
}

setup_apache () {
	# Enable Modules
	a2enmod suexec_module
	a2enmod actions_module
	a2enmod rewrite_module
	a2enmod ssl_module
	a2enmod socache_shmcb_module
	a2enmod cgid_module
	a2enmod cgi_module
	a2enmod proxy_module
	a2enmod proxy_fcgi_module

	# Enable Sample SSL Virtual Host
	sed -i '' -e "s:#Include etc/apache${APACHE_VERSION}/extra/httpd-ssl.conf:Include etc/apache${APACHE_VERSION}/extra/httpd-ssl.conf:" $LOCAL_BASE/etc/apache${APACHE_VERSION}/httpd.conf

	# Install Sample SSL Certificate and Key
	cp $TMPDIR/cert.pem $LOCAL_BASE/etc/apache${APACHE_VERSION}/server.crt
	cp $TMPDIR/key.pem $LOCAL_BASE/etc/apache${APACHE_VERSION}/server.key

	# Enable mod_fcgid
	echo "LoadModule fcgid_module libexec/apache${APACHE_VERSION}/mod_fcgid.so" > $CONFIG_BASE/apache${APACHE_VERSION}/modules.d/000_mod_fcgid.conf

	# Load accept filter into kernel if not already loaded
	sysrc -f /boot/loader.conf accf_http_load="YES"
	if ! kldstat -m accf_http > /dev/null 2>&1; then kldload accf_http; fi
}

setup_mysql () {
	# Setup Default MySQL Settings
	# logger_info "Copying default my.cnf and initializing database..."	
	# No action needed at this time
}

setup_postgresql () {
	# PostgreSQL needs to be initialized
	logger_info "Initializing postgresql database..."
	runner "${SERVICE} postgresql oneinitdb"
}

webmin_configure_apache() {
	# Use Correct Apache Version
	sed -i '' -e "s/apache22\//apache${APACHE_VERSION}\//" $WEBMIN_CONFIG_DIR/apache/config

	# Configure Webmin to know how to stop, start, restart, and reload
	setconfig "stop_cmd=${SERVICE} apache${APACHE_VERSION} stop" $WEBMIN_CONFIG_DIR/apache/config
	setconfig "start_cmd=${SERVICE} apache${APACHE_VERSION} start" $WEBMIN_CONFIG_DIR/apache/config
	setconfig "graceful_cmd=${SERVICE} apache${APACHE_VERSION} reload" $WEBMIN_CONFIG_DIR/apache/config
	setconfig "apply_cmd=${SERVICE} apache${APACHE_VERSION} restart" $WEBMIN_CONFIG_DIR/apache/config

	# Setup Modular Virtual Hosting
	mkdir -p $CONFIG_BASE/apache${APACHE_VERSION}/sites-available
	mkdir -p $CONFIG_BASE/apache${APACHE_VERSION}/sites-enabled
	echo -e "# Virtuamin Virtual Hosting\nIncludeOptional etc/apache${APACHE_VERSION}/sites-enabled/*.conf" > $CONFIG_BASE/apache${APACHE_VERSION}/Includes/virtuamin.conf
	setconfig "link_dir=$CONFIG_BASE/apache${APACHE_VERSION}/sites-enabled" $WEBMIN_CONFIG_DIR/apache/config
	setconfig "virt_file=$CONFIG_BASE/apache${APACHE_VERSION}/sites-available" $WEBMIN_CONFIG_DIR/apache/config

	# Default to using php-fpm execution for all new sites (Currently broken: https://www.virtualmin.com/node/70648)
	#setconfig "php_suexec=3" $WEBMIN_CONFIG_DIR/virtual-server/config
	# Default to using php-fcgi execution for all new sites
	setconfig "php_suexec=2" $WEBMIN_CONFIG_DIR/virtual-server/config

	# Re-Run Post-Install script for Apache Webmin Module
	(cd $LIB_BASE/webmin; WEBMIN_CONFIG=$WEBMIN_CONFIG_DIR WEBMIN_VAR=/var/log/webmin $LIB_BASE/webmin/run-postinstalls.pl apache)

	# Update ACLs
	env perl $LIB_BASE/webmin/newmods.pl $WEBMIN_CONFIG_DIR apache

	# Manually update cache file
	setconfig "apache=1" $WEBMIN_CONFIG_DIR/installed.cache
}

webmin_configure_bind() {
	# Reconfgigure BIND paths for correct config path if nessecary (FreeBSD 10+)
	config_path=$(named -V | egrep -o "sysconfdir=[/|A-z]+" | cut -d'=' -f2)

	if [ ! -z $config_path ]; then
		setconfig "named_path=$(which named)" $WEBMIN_CONFIG_DIR/bind8/config
		setconfig "named_conf=${config_path}/named.conf" $WEBMIN_CONFIG_DIR/bind8/config
		setconfig "rndc_conf=${config_path}/rndc.conf" $WEBMIN_CONFIG_DIR/bind8/config
	fi

	# Configure Webmin to know how to stop, start, and reload
	setconfig "stop_cmd=${SERVICE} named stop" $WEBMIN_CONFIG_DIR/bind8/config
	setconfig "start_cmd=${SERVICE} named start" $WEBMIN_CONFIG_DIR/bind8/config
	setconfig "restart_cmd=${SERVICE} named reload" $WEBMIN_CONFIG_DIR/bind8/config

	# Re-Run Post-Install script for BIND Webmin Module
	(cd $LIB_BASE/webmin; WEBMIN_CONFIG=$WEBMIN_CONFIG_DIR WEBMIN_VAR=/var/log/webmin $LIB_BASE/webmin/run-postinstalls.pl bind8)

	# Update ACLs
	env perl $LIB_BASE/webmin/newmods.pl $WEBMIN_CONFIG_DIR bind8

	# Manually update cache file
	setconfig "bind8=1" $WEBMIN_CONFIG_DIR/installed.cache
}

webmin_configure_dovecot() {
	# Set correct configuration file location
	setconfig "dovecot_config=$CONFIG_BASE/dovecot/dovecot.conf" $WEBMIN_CONFIG_DIR/dovecot/config

	# Re-Run Post-Install script for BIND Webmin Module
	(cd $LIB_BASE/webmin; WEBMIN_CONFIG=$WEBMIN_CONFIG_DIR WEBMIN_VAR=/var/log/webmin $LIB_BASE/webmin/run-postinstalls.pl dovecot)

	# Update ACLs
	env perl $LIB_BASE/webmin/newmods.pl $WEBMIN_CONFIG_DIR dovecot

	# Make sure we use Maildir system in usermin
	setconfig "mail_system=1" $CONFIG_BASE/usermin/mailbox/config

	# Manually update cache file
	setconfig "dovecot=1" $WEBMIN_CONFIG_DIR/installed.cache
}

webmin_configure_mysql() {
	# Set correct configuration file location
	setconfig "my_cnf=$CONFIG_BASE/mysql/my.cnf" $WEBMIN_CONFIG_DIR/mysql/config

	# Configure Webmin to know how to stop and start MySQL
	setconfig "start_cmd=${SERVICE} mysql-server start" $WEBMIN_CONFIG_DIR/mysql/config
	setconfig "stop_cmd=${SERVICE} mysql-server stop" $WEBMIN_CONFIG_DIR/mysql/config
}

webmin_configure_openldap() {

}

webmin_configure_postgresql() {
	# Configure Webmin to know how to initialize, stop, and start Postgres
	setconfig "stop_cmd=${SERVICE} postgresql stop" $WEBMIN_CONFIG_DIR/postgresql/config
	setconfig "start_cmd=${SERVICE} postgresql start" $WEBMIN_CONFIG_DIR/postgresql/config
	setconfig "setup_cmd=${SERVICE} postgresql initdb" $WEBMIN_CONFIG_DIR/postgresql/config
}