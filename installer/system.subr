#!/bin/sh

export SERVICE=$(which service)

# Detects the System's primary IP address
detect_ip () {
	primaryaddr=`/sbin/ifconfig -a -u -G lo | grep inet | cut -d " " -f 2 | head -n1`
	if [ $primaryaddr ]; then
		logger_info "Primary address detected as $primaryaddr"
		address=$primaryaddr
		echo "IP: $address"
		return 0
	else
		logger_info "Unable to determine IP address of primary interface."
		echo "Please enter the name of your primary network interface: "
		read primaryinterface
		primaryaddr=`/sbin/ifconfig $primaryinterface | grep 'inet' | cut -d " " -f2 | head -n1`
		if [ "$primaryaddr" = "" ]; then
			# Try again with FreeBSD format
			primaryaddr=`/sbin/ifconfig $primaryinterface | grep 'inet' | awk '{ print $2 }'`
		fi
		if [ $primaryaddr ]; then
			logger_info "Primary address detected as $primaryaddr"
			address=$primaryaddr
			echo "IP: $address"
		else
			fatal "Unable to determine IP address of selected interface.  Cannot continue."
		fi
		return 0
	fi
}

# Disables sendmail
disable_sendmail() {
	sysrc sendmail_enable="NO" sendmail_submit_enable="NO" \
	sendmail_outbound_enable="NO" sendmail_msp_queue_enable="NO"
}

# Disable some sendmail specific daily maintenance routines
disable_sendmail_tasks() {
	sysrc -f /etc/periodic.conf daily_clean_hoststat_enable="NO" \
	daily_status_mail_rejects_enable="NO" \
	daily_status_include_submit_mailq="NO" daily_submit_queuerun="NO"
}

# Enable services at boot
enable_services() {
	sysrc apache${APACHE_VERSION}_enable="YES" named_enable="YES" webmin_enable="YES" \
	usermin_enable="YES" postfix_enable="YES" dovecot_enable="YES" \
	mysql_enable="YES" postgresql_enable="YES"
}

# Set a Webmin directive or add it if it doesn't exist
setconfig () {
	sc_config=$2
	sc_value=$1
	sc_directive=`echo $sc_value | cut -d'=' -f1`
	if grep -q $sc_directive $2; then
		sed -i '' -e "s#$sc_directive.*#$sc_value#" $sc_config
	else
		echo $1 >> $2
	fi
}

a2enmod () {
	module_name=$1
	conf_file=${LOCAL_BASE}/etc/apache${APACHE_VERSION}/httpd.conf
	
	if [ ! -z "$2" ]; then 
		conf_file=$2
	fi

	if [ ! -f "$conf_file" ]; then 
		echo "Invalid configuration file."
		return 2
	fi

	if [ -z "$module_name" ]; then 
		echo "Module name not specified"
		return 3
	fi

	sed -i '' 's,^#\(LoadModule '${module_name}'.*$\),\1,g' $conf_file
}

a2dismod () {
	module_name=$1
	conf_file=${LOCAL_BASE}/etc/apache${APACHE_VERSION}/httpd.conf
	
	if [ ! -z "$2" ]; then 
		conf_file=$2
	fi	

	if [ ! -f "$conf_file" ]; then 
		echo "Invalid configuration file."
		return 2
	fi

	if [ -z "$module_name" ]; then 
		echo "Module name not specified"
		return 3
	fi

	sed -i '' 's,^\(LoadModule '${module_name}'.*$\),#\1,g' $conf_file
}

# Sets the system hostname
set_hostname () {
	i=0
	while [ $i -eq 0 ]; do
		if [ "$forcehostname" = "" ]; then
			printf "Please enter a fully qualified hostname (for example, host.example.com): "
			read line
		else
			logger_info "Setting hostname to $forcehostname"
			line=$forcehostname
		fi
		if ! is_fully_qualified $line; then
			logger_info "Hostname $line is not fully qualified."
		else
			hostname $line
			i=1
		fi
	done
}

# Adds the hostname entry to /etc/hosts
add_hostname_to_hosts () {
	fq_hostname=$(hostname -f)
	system_ip_address=$(detect_ip | grep "IP:" | awk -F ': ' '{ print $2 }')
	shortname=$(hostname -s)
	if grep $system_ip_address /etc/hosts > /dev/null; then
		logger_info "Entry for IP $system_ip_address exists in /etc/hosts."
		logger_info "Updating with new hostname."
		sed -i '' "s/^$system_ip_address\([\s\t]*\).*$/$system_ip_address$(printf '\t')$fq_hostname$(printf '\t')$shortname/" /etc/hosts
	else
		logger_info "Adding new entry for hostname $fq_hostname on $system_ip_address to /etc/hosts."
		printf "$system_ip_address\t$fq_hostname\t$shortname\n" >> /etc/hosts
	fi
}

# Setup Package Repositries
setup_pkg_repos() {
	# Bootstrap PKG if needed
	pkg -N
	if [ $? == 1 ]; then
		export ASSUME_ALWAYS_YES=YES
		pkg bootstrap
		unset ASSUME_ALWAYS_YES
	fi

	mkdir -p $CONFIG_BASE/pkg/repos/

	# Disable FreeBSD standard repository
	echo 'FreeBSD: { enabled: no }' > $CONFIG_BASE/pkg/repos/FreeBSD.conf

	# Enable Virtualman repository
	echo -e 'Virtualmin: {\n\t url: "'"${REPO_URL}"'",\n\t enabled: yes\n}' > $CONFIG_BASE/pkg/repos/Virtualmin.conf

	# Update repositories
	pkg update -f
}

# Copy a file if the destination doesn't exist
testcp () {
	if [ ! -e $2 ]; then
		cp $1 $2
	fi
}

# mkdir if it doesn't exist
testmkdir () {
	if [ ! -d $1 ]; then
		mkdir -p $1
	fi
}

generate_self_signed_ssl_certificate () {
	logger_info "Generating a self-sign certificate and key pair..."

	# SSL store
	mkdir -p $LOCAL_BASE/etc/ssl/certs; mkdir -p $LOCAL_BASE/etc/ssl/private

	host=`hostname`

	# Generate a new SSL key and certificate for this host
	openssl req -newkey rsa:2048 -x509 -nodes -out $TMPDIR/cert.pem -keyout $TMPDIR/key.pem -days 1825 -sha256 >/dev/null 2>&1 <<EOF
.
.
.
Virtualmin Server on $host
Self Signed SSL Certificate
$host
root@$host
EOF

	# Check Result, adjust permisssions
	if [ "$?" = "0" ]; then
		logger_info "Sucessful"
		chmod 400 $TMPDIR/key.pem
		chmod 444 $TMPDIR/cert.pem
	fi
}

# Starts all the background services
start_services () {
	logger_info "Sarting all required services"
	local_services="named apache${APACHE_VERSION} postfix dovecot mysql-server postgresql webmin usermin"

	for local_service in $local_services; do
		STATUS=$($SERVICE $local_service status)
		if [ $? -gt 0 ]; then
			$SERVICE $local_service start
		else
			$SERVICE $local_service restart
		fi
	done
}

# Deprecated
# Use `resolvconf_local_nameserver_ip` instead.  Fallsback to this if that fails.
add_local_namesever_ip () {
	nameserevr_IP="127.0.0.1"
	etc_resolv_conf=/etc/resolv.conf

	if [ ! -z "$1" ]; then 
		nameserevr_IP=$1
	fi

	valid_ip=$(is_valid_ip "$nameserevr_IP")
	if [ "$?" != 0 ]; then 
		echo "Invalid IP address."
		return 2
	fi

	fgrep "nameserver $nameserevr_IP" $etc_resolv_conf >/dev/null
	if [ "$?" != 0 ]; then
		logger_info "Adding $nameserevr_IP to $etc_resolv_conf"
		# Remove Empty lines at end of file
		sed -i '' -e :a -e '/^\n*$/{$d;N;};/\n$/ba' $etc_resolv_conf
		# Add namesrver entry
		echo "nameserver $nameserevr_IP" >> $etc_resolv_conf
	fi
}

resolvconf_local_nameserver_ip () {

	# Fallback to using `add_local_namesever_ip` if resovconf doesn't exist.
	which resolvconf >/dev/null
	if [ "$?" != 0 ]; then
		add_local_namesever_ip $@
		return 0
	fi

	nameserevr_IP="127.0.0.1"
	search_domain=$(hostname -d)

	if [ ! -z "$1" ]; then 
		nameserevr_IP=$1
	fi

	if [ ! -z "$2" ]; then 
		search_domain=$2
	fi

	valid_ip=$(is_valid_ip "$nameserevr_IP")
	if [ "$?" != 0 ]; then 
		echo "Invalid IP address."
		return 2
	fi

	logger_info "Configuring local resolver using using resolvconf."
	logger_info "Setting: search_domains=\"${search_domain}\" name_servers=\"${nameserevr_IP}\"."
	touch /etc/resolvconf.conf
	sysrc -f /etc/resolvconf.conf search_domains="${search_domain}" name_servers="${nameserevr_IP}"
	resolvconf -u
}
